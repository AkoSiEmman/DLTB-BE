import mongoose from "mongoose";
declare const TORTicketModel: mongoose.Model<{
    recordId: string;
    modId: string;
    fieldData: mongoose.Types.DocumentArray<{
        route: string;
        device_id: string;
        control_no: string;
        tor_no: string;
        date_of_trip: string;
        bus_no: string;
        route_code: string;
        bound: string;
        trip_no: number;
        ticket_no: string;
        ticket_type: string;
        ticket_status: string;
        timestamp: Date;
        from_place: string;
        to_place: string;
        from_km: number;
        to_km: number;
        km_run: number;
        fare: number;
        card_no: string;
        status: string;
        lat: string;
        long: string;
        created_on: Date;
        updated_on: Date;
        previous_balance: number;
        current_balance: number;
        UUID?: string | undefined;
    }>;
    portalData: any[];
}, {}, {}, {}, mongoose.Document<unknown, {}, {
    recordId: string;
    modId: string;
    fieldData: mongoose.Types.DocumentArray<{
        route: string;
        device_id: string;
        control_no: string;
        tor_no: string;
        date_of_trip: string;
        bus_no: string;
        route_code: string;
        bound: string;
        trip_no: number;
        ticket_no: string;
        ticket_type: string;
        ticket_status: string;
        timestamp: Date;
        from_place: string;
        to_place: string;
        from_km: number;
        to_km: number;
        km_run: number;
        fare: number;
        card_no: string;
        status: string;
        lat: string;
        long: string;
        created_on: Date;
        updated_on: Date;
        previous_balance: number;
        current_balance: number;
        UUID?: string | undefined;
    }>;
    portalData: any[];
}> & {
    recordId: string;
    modId: string;
    fieldData: mongoose.Types.DocumentArray<{
        route: string;
        device_id: string;
        control_no: string;
        tor_no: string;
        date_of_trip: string;
        bus_no: string;
        route_code: string;
        bound: string;
        trip_no: number;
        ticket_no: string;
        ticket_type: string;
        ticket_status: string;
        timestamp: Date;
        from_place: string;
        to_place: string;
        from_km: number;
        to_km: number;
        km_run: number;
        fare: number;
        card_no: string;
        status: string;
        lat: string;
        long: string;
        created_on: Date;
        updated_on: Date;
        previous_balance: number;
        current_balance: number;
        UUID?: string | undefined;
    }>;
    portalData: any[];
} & {
    _id: mongoose.Types.ObjectId;
}, mongoose.Schema<any, mongoose.Model<any, any, any, any, any, any>, {}, {}, {}, {}, mongoose.DefaultSchemaOptions, {
    recordId: string;
    modId: string;
    fieldData: mongoose.Types.DocumentArray<{
        route: string;
        device_id: string;
        control_no: string;
        tor_no: string;
        date_of_trip: string;
        bus_no: string;
        route_code: string;
        bound: string;
        trip_no: number;
        ticket_no: string;
        ticket_type: string;
        ticket_status: string;
        timestamp: Date;
        from_place: string;
        to_place: string;
        from_km: number;
        to_km: number;
        km_run: number;
        fare: number;
        card_no: string;
        status: string;
        lat: string;
        long: string;
        created_on: Date;
        updated_on: Date;
        previous_balance: number;
        current_balance: number;
        UUID?: string | undefined;
    }>;
    portalData: any[];
}, mongoose.Document<unknown, {}, mongoose.FlatRecord<{
    recordId: string;
    modId: string;
    fieldData: mongoose.Types.DocumentArray<{
        route: string;
        device_id: string;
        control_no: string;
        tor_no: string;
        date_of_trip: string;
        bus_no: string;
        route_code: string;
        bound: string;
        trip_no: number;
        ticket_no: string;
        ticket_type: string;
        ticket_status: string;
        timestamp: Date;
        from_place: string;
        to_place: string;
        from_km: number;
        to_km: number;
        km_run: number;
        fare: number;
        card_no: string;
        status: string;
        lat: string;
        long: string;
        created_on: Date;
        updated_on: Date;
        previous_balance: number;
        current_balance: number;
        UUID?: string | undefined;
    }>;
    portalData: any[];
}>> & mongoose.FlatRecord<{
    recordId: string;
    modId: string;
    fieldData: mongoose.Types.DocumentArray<{
        route: string;
        device_id: string;
        control_no: string;
        tor_no: string;
        date_of_trip: string;
        bus_no: string;
        route_code: string;
        bound: string;
        trip_no: number;
        ticket_no: string;
        ticket_type: string;
        ticket_status: string;
        timestamp: Date;
        from_place: string;
        to_place: string;
        from_km: number;
        to_km: number;
        km_run: number;
        fare: number;
        card_no: string;
        status: string;
        lat: string;
        long: string;
        created_on: Date;
        updated_on: Date;
        previous_balance: number;
        current_balance: number;
        UUID?: string | undefined;
    }>;
    portalData: any[];
}> & {
    _id: mongoose.Types.ObjectId;
}>>;
export default TORTicketModel;
