import mongoose from "mongoose";
declare const DispatchModel: mongoose.Model<{
    date: Date;
    designation: string;
    route: string;
    bound: string;
    coopName: string;
    torNo: string;
    otNo: string;
    atm: string;
    tripNo: string;
    driverName: string;
    conductorName: string;
    dispatcherName: string;
    trip: string;
}, {}, {}, {}, mongoose.Document<unknown, {}, {
    date: Date;
    designation: string;
    route: string;
    bound: string;
    coopName: string;
    torNo: string;
    otNo: string;
    atm: string;
    tripNo: string;
    driverName: string;
    conductorName: string;
    dispatcherName: string;
    trip: string;
}> & Omit<{
    date: Date;
    designation: string;
    route: string;
    bound: string;
    coopName: string;
    torNo: string;
    otNo: string;
    atm: string;
    tripNo: string;
    driverName: string;
    conductorName: string;
    dispatcherName: string;
    trip: string;
} & {
    _id: mongoose.Types.ObjectId;
}, never>, mongoose.Schema<any, mongoose.Model<any, any, any, any, any, any>, {}, {}, {}, {}, mongoose.DefaultSchemaOptions, {
    date: Date;
    designation: string;
    route: string;
    bound: string;
    coopName: string;
    torNo: string;
    otNo: string;
    atm: string;
    tripNo: string;
    driverName: string;
    conductorName: string;
    dispatcherName: string;
    trip: string;
}, mongoose.Document<unknown, {}, mongoose.FlatRecord<{
    date: Date;
    designation: string;
    route: string;
    bound: string;
    coopName: string;
    torNo: string;
    otNo: string;
    atm: string;
    tripNo: string;
    driverName: string;
    conductorName: string;
    dispatcherName: string;
    trip: string;
}>> & Omit<mongoose.FlatRecord<{
    date: Date;
    designation: string;
    route: string;
    bound: string;
    coopName: string;
    torNo: string;
    otNo: string;
    atm: string;
    tripNo: string;
    driverName: string;
    conductorName: string;
    dispatcherName: string;
    trip: string;
}> & {
    _id: mongoose.Types.ObjectId;
}, never>>>;
export default DispatchModel;
